{"version":3,"file":"axios-cancelable.js","sources":["../src/index.js"],"sourcesContent":["import { CancelToken } from 'axios'\n\nclass RequestManager {\n  constructor(options = {}) {\n    this.options = options\n    this.requests = new Map(options.initial || [])\n  }\n\n  add(requestId, cancelFn) {\n    this.log(`Adding request ${requestId}`)\n\n    if (this.requests.has(requestId)) {\n      this.cancel(requestId, `Duplicate request ${requestId}`)\n    }\n\n    this.requests.set(requestId, cancelFn)\n  }\n\n  remove(requestId) {\n    this.log(`Removing request ${requestId}`)\n    this.requests.delete(requestId)\n  }\n\n  cancel(requestId, reason = '') {\n    if (this.requests.has(requestId)) {\n      this.requests.get(requestId)(reason)\n      this.remove(requestId)\n      this.log(`Cancelled request ${requestId}`)\n    }\n  }\n\n  cancelAll(reason = '') {\n    for (const requestId in this.requests.keys()) { // eslint-disable-line guard-for-in,no-restricted-syntax,max-len\n      this.cancel(requestId, reason)\n    }\n  }\n\n  log(message) {\n    const { debug, logger } = this.options\n    const prefix = 'axios-cancelable: '\n\n    if (debug) {\n      logger(`${prefix}${message}`)\n    }\n  }\n}\n\nexport default function patchAxios(axios, { debug = false, logger = console.log } = {}) { // eslint-disable-line no-console,max-len\n  const requestManager = new RequestManager({ debug, logger })\n\n  axios.interceptors.request.use((config) => {\n    const { requestId } = config\n\n    if (requestId) {\n      const source = CancelToken.source()\n      config.cancelToken = source.token\n      requestManager.add(requestId, source.cancel)\n    }\n\n    return config\n  })\n\n  axios.interceptors.response.use((response) => {\n    const { requestId } = response.config\n    if (requestId) {\n      requestManager.remove(requestId)\n    }\n\n    return response\n  })\n\n  axios.cancel = (requestId, reason) => {\n    if (requestId) {\n      requestManager.cancel(requestId, reason)\n    }\n  }\n\n  axios.cancelAll = (reason) => {\n    requestManager.cancelAll(reason)\n  }\n}\n"],"names":["RequestManager","constructor","options","requests","Map","initial","add","requestId","cancelFn","log","this","has","cancel","set","remove","delete","reason","get","cancelAll","const","keys","message","axios","ref","console","requestManager","debug","logger","interceptors","request","use","config","source","CancelToken","cancelToken","token","response"],"mappings":"uBAEMA,EACJC,SAAYC,kBAAU,SACfA,QAAUA,OACVC,SAAW,IAAIC,IAAIF,EAAQG,SAAW,KAG7CC,YAAAA,aAAIC,EAAWC,QACRC,sBAAsBF,GAEvBG,KAAKP,SAASQ,IAAIJ,SACfK,OAAOL,uBAAgCA,QAGzCJ,SAASU,IAAIN,EAAWC,IAG/BM,YAAAA,gBAAOP,QACAE,wBAAwBF,QACxBJ,SAASY,OAAOR,IAGvBK,YAAAA,gBAAOL,EAAWS,kBAAS,IACrBN,KAAKP,SAASQ,IAAIJ,UACfJ,SAASc,IAAIV,GAAWS,QACxBF,OAAOP,QACPE,yBAAyBF,KAIlCW,YAAAA,mBAAUF,OACHG,IAAMZ,oBADM,IACOG,KAAKP,SAASiB,YAC/BR,OAAOL,EAAWS,IAI3BP,YAAAA,aAAIY,SACwBX,KAAKR,8BAChB,qBAGMmB,mBAKV,SAAoBC,EAAOC,kBAA0C,kCAAhC,iCAAgBC,QAAQf,SACpEgB,EAAiB,IAAIzB,EAAe,OAAE0B,SAAOC,IAEnDL,EAAMM,aAAaC,QAAQC,aAAKC,GACtBxB,qBAEJA,EAAW,KACPyB,EAASC,cAAYD,SAC3BD,EAAOG,YAAcF,EAAOG,MAC5BV,EAAenB,IAAIC,EAAWyB,EAAOpB,eAGhCmB,IAGTT,EAAMM,aAAaQ,SAASN,aAAKM,SACTA,EAASL,wBAC3BxB,GACFkB,EAAeX,OAAOP,GAGjB6B,IAGTd,EAAMV,gBAAUL,EAAWS,GACrBT,GACFkB,EAAeb,OAAOL,EAAWS,IAIrCM,EAAMJ,mBAAaF,GACjBS,EAAeP,UAAUF"}